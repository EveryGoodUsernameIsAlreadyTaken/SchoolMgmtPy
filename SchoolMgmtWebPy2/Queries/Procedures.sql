USE SCHOOLMGMT;

DELIMITER $$
DROP PROCEDURE IF EXISTS `PQ_NEW_SID`$$
CREATE PROCEDURE `PQ_NEW_SID` ()
BEGIN
	DECLARE V_SID INT DEFAULT 0;
	SET V_SID = (SELECT COUNT(SID) FROM STUDENTS);
	IF V_SID <= 0 THEN SET V_SID = 1;
	ELSE SELECT MAX(SID) + 1 INTO V_SID FROM STUDENTS;
    END IF;
    
	SELECT V_SID;
END $$

DROP PROCEDURE IF EXISTS `PQ_LOG_STUDENT`$$
CREATE PROCEDURE `PQ_LOG_STUDENT` (
	A_USERNAME   VARCHAR(30),
    A_PASSWORD   VARCHAR(30))
BEGIN
	SELECT * FROM STUDENTS WHERE USERNAME = A_USERNAME AND PASSWORD = A_PASSWORD;
END $$

DROP PROCEDURE IF EXISTS `PQ_REG_STUDENT`$$
CREATE PROCEDURE `PQ_REG_STUDENT` (
	A_SID			INT,
	A_USERNAME		VARCHAR(30),
	A_PASSWORD		VARCHAR(30), 
	A_FIRSTNAME		VARCHAR(30),
	A_LASTNAME		VARCHAR(30),
	A_DOB			VARCHAR(10),
	A_ADDR1			VARCHAR(30),
	A_ADDR2			VARCHAR(30),
	A_CITY			VARCHAR(30),
	A_ST			VARCHAR(2),
	A_ZIP			VARCHAR(5),
	A_EMAIL			VARCHAR(30),
	A_PHONENO		VARCHAR(15))
BEGIN
	INSERT INTO STUDENTS VALUES(A_SID, A_USERNAME, A_PASSWORD, A_FIRSTNAME, A_LASTNAME, A_DOB, A_ADDR1, A_ADDR2, A_CITY, A_ST, A_ZIP, A_EMAIL, A_PHONENO, 0, 0);
END $$

DROP PROCEDURE IF EXISTS `PQ_MOD_STUDENT`$$
CREATE PROCEDURE `PQ_MOD_STUDENT` (
	A_SID			INT,
	A_USERNAME		VARCHAR(30),
	A_PASSWORD		VARCHAR(30), 
	A_FIRSTNAME		VARCHAR(30),
	A_LASTNAME		VARCHAR(30),
	A_DOB			VARCHAR(10),
	A_ADDR1			VARCHAR(30),
	A_ADDR2			VARCHAR(30),
	A_CITY			VARCHAR(30),
	A_ST			VARCHAR(2),
	A_ZIP			VARCHAR(5),
	A_EMAIL			VARCHAR(30),
	A_PHONENO		VARCHAR(15))
BEGIN
	UPDATE STUDENTS SET SID = A_SID, USERNAME = A_USERNAME, PASSWORD = A_PASSWORD, FIRSTNAME = A_FIRSTNAME, LASTNAME = A_LASTNAME, DOB = A_DOB, ADDR1 = A_ADDR1, ADDR2 = A_ADDR2, CITY = A_CITY, ST = A_ST, ZIP = A_ZIP, EMAIL = A_EMAIL, PHONENO = A_PHONENO WHERE SID = A_SID;
END $$

DROP PROCEDURE IF EXISTS `PQ_GET_CATEGORIES`$$
CREATE PROCEDURE `PQ_GET_CATEGORIES` ()
BEGIN
	SELECT DISTINCT CATEGORY FROM COURSES ORDER BY CATEGORY;
END $$

DROP PROCEDURE IF EXISTS `PQ_GET_COURSES_IN_CAT`$$
CREATE PROCEDURE `PQ_GET_COURSES_IN_CAT` (
	A_CATEGORY		VARCHAR(30),
    A_SID 			INT)
BEGIN
	SELECT * FROM COURSES WHERE CID NOT IN (SELECT COURSEHIST.CID FROM COURSEHIST WHERE COURSEHIST.SID = A_SID) AND CATEGORY = A_CATEGORY ORDER BY CLASSNAME;
END $$

DROP PROCEDURE IF EXISTS `PQ_JOIN_COURSE`$$
CREATE PROCEDURE `PQ_JOIN_COURSE` (
	A_CID		INT,
	A_SID		INT,
	A_TIME		VARCHAR(20),
	A_WGRADE	VARCHAR(2),
	A_T_YEAR	INT)
BEGIN
	UPDATE COURSES SET CURSIZE = CURSIZE + 1 WHERE CID = A_CID;
	INSERT INTO COURSEHIST VALUES(A_CID, A_SID, 0, A_TIME, A_WGRADE, A_T_YEAR, 0);
END $$

DROP PROCEDURE IF EXISTS `PQ_VIEW_COURSES`$$
CREATE PROCEDURE `PQ_VIEW_COURSES` (
	A_SID		INT)
BEGIN
	SELECT * FROM COURSES LEFT JOIN COURSEHIST ON COURSES.CID = COURSEHIST.CID WHERE COURSEHIST.SID = A_SID;
END $$

DROP PROCEDURE IF EXISTS `PQ_LEAVE_COURSE`$$
CREATE PROCEDURE `PQ_LEAVE_COURSE` (
	A_SID		INT,
    A_CID		INT)
BEGIN
	UPDATE COURSES SET CURSIZE = CURSIZE-1 WHERE CID = A_CID;
	DELETE FROM COURSEHIST WHERE CID = A_CID AND SID = A_SID;
END $$

DROP PROCEDURE IF EXISTS `PQ_FIND_REPORT_IN_CID_WITH_SID`$$
CREATE PROCEDURE `PQ_FIND_REPORT_IN_CID_WITH_SID` (
	A_CID		INT,
	A_SID		INT)
BEGIN
	SELECT * FROM REPORTS WHERE SID = A_SID AND CID = A_CID AND FINISHED = 0;
END $$

DROP PROCEDURE IF EXISTS `PQ_FIND_TEST_IN_CID_WITH_SID`$$
CREATE PROCEDURE `PQ_FIND_TEST_IN_CID_WITH_SID` (
	A_CID		INT,
	A_SID		INT)
BEGIN
	SELECT * FROM TESTS WHERE SID = A_SID AND CID = A_CID AND FINISHED = 0;
END $$

DROP PROCEDURE IF EXISTS `PQ_FIND_REPORT_WITH_SID`$$
CREATE PROCEDURE `PQ_FIND_REPORT_WITH_SID` (
	A_SID		INT,
	A_RID		INT)
BEGIN
	SELECT * FROM REPORTS WHERE SID = A_SID AND REPORTID = A_RID AND FINISHED = 0;
END $$

DROP PROCEDURE IF EXISTS `PQ_UPDATE_REPORT_ANSWERS`$$
CREATE PROCEDURE `PQ_UPDATE_REPORT_ANSWERS` (
	A_REPORTID		INT,
    A_SID			INT,
	A_ANSWERS		VARCHAR(1000))
BEGIN
	UPDATE REPORTS SET ANSWERS = A_ANSWERS, FINISHED = 1 WHERE REPORTID = A_REPORTID AND SID = A_SID;
END $$

DELIMITER $$
DROP PROCEDURE IF EXISTS `PQ_FIND_TEST_WITH_SID`$$
CREATE PROCEDURE `PQ_FIND_TEST_WITH_SID` (
	A_SID		INT,
	A_TID		INT)
BEGIN
	SELECT * FROM TESTS WHERE SID = A_SID AND TESTID = A_TID AND FINISHED = 0;
END $$

DROP PROCEDURE IF EXISTS `PQ_UPDATE_TEST_ANSWERS`$$
CREATE PROCEDURE `PQ_UPDATE_TEST_ANSWERS` (
	A_TESTID		INT,
    A_SID			INT,
	A_ANSWERS		VARCHAR(1000))
BEGIN
	UPDATE TESTS SET ANSWERS = A_ANSWERS, FINISHED = 1 WHERE TESTID = A_TESTID AND SID = A_SID;
END $$

DROP PROCEDURE IF EXISTS `PQ_GET_GRADES`$$
CREATE PROCEDURE `PQ_GET_GRADES` (
	A_SID		INT)
BEGIN
	SELECT COURSES.CLASSNAME, COURSEHIST.POINTS FROM COURSES INNER JOIN COURSEHIST ON COURSES.CID = COURSEHIST.CID WHERE COURSEHIST.SID = A_SID;
END$$
DELIMITER ;



DELIMITER $$
DROP PROCEDURE IF EXISTS `PQ_NEW_TID`$$
CREATE PROCEDURE `PQ_NEW_TID` ()
BEGIN
	DECLARE V_TID INT DEFAULT 0;
	SET V_TID = (SELECT COUNT(TID) FROM TEACHERS);
	IF V_TID <= 0 THEN SET V_TID = 1;
	ELSE SELECT MAX(TID) + 1 INTO V_TID FROM TEACHERS;
    END IF;
    
	SELECT V_TID;
END $$

DROP PROCEDURE IF EXISTS `PQ_LOG_TEACHER`$$
CREATE PROCEDURE `PQ_LOG_TEACHER` (
	A_USERNAME   VARCHAR(30),
    A_PASSWORD   VARCHAR(30))
BEGIN
	SELECT * FROM TEACHERS WHERE USERNAME = A_USERNAME AND PASSWORD = A_PASSWORD;
END $$

DROP PROCEDURE IF EXISTS `PQ_REG_TEACHER`$$
CREATE PROCEDURE `PQ_REG_TEACHER` (
	A_TID			INT,
	A_USERNAME		VARCHAR(30),
	A_PASSWORD		VARCHAR(30), 
	A_FIRSTNAME		VARCHAR(30),
	A_LASTNAME		VARCHAR(30),
	A_EMAIL			VARCHAR(30),
    A_DEPARTMENT	VARCHAR(30),
    A_COLLEGE		VARCHAR(30),
    A_SUBJECTS		VARCHAR(30),
	A_PHONENO		VARCHAR(15),
    A_WEBSITE		VARCHAR(30))
BEGIN
	INSERT INTO TEACHERS VALUES(A_TID, A_USERNAME, A_PASSWORD, A_FIRSTNAME, A_LASTNAME, A_EMAIL, A_DEPARTMENT, A_COLLEGE, A_SUBJECTS, A_PHONENO, A_WEBSITE);
END $$

DROP PROCEDURE IF EXISTS `PQ_MOD_TEACHER`$$
CREATE PROCEDURE `PQ_MOD_TEACHER` (
	A_TID			INT,
	A_USERNAME		VARCHAR(30),
	A_PASSWORD		VARCHAR(30), 
	A_FIRSTNAME		VARCHAR(30),
	A_LASTNAME		VARCHAR(30),
	A_EMAIL			VARCHAR(30),
    A_DEPARTMENT	VARCHAR(30),
    A_COLLEGE		VARCHAR(30),
    A_SUBJECTS		VARCHAR(30),
	A_PHONENO		VARCHAR(15),
    A_WEBSITE		VARCHAR(30))
BEGIN
	UPDATE STUDENTS SET SID = A_SID, USERNAME = A_USERNAME, PASSWORD = A_PASSWORD, FIRSTNAME = A_FIRSTNAME, LASTNAME = A_LASTNAME, EMAIL = A_EMAIL, DEPARTMENT = A_DEPARTMENT, COLLEGE = A_COLLEGE, SUBJECTS = A_SUBJECTS, PHONENO = A_PHONENO, WEBSITE = A_WEBSITE WHERE TID = A_TID;
END $$

DROP PROCEDURE IF EXISTS `PQ_NEW_CID`$$
CREATE PROCEDURE `PQ_NEW_CID` (OUT A_CID INT)
BEGIN
	DECLARE V_CID INT DEFAULT 0;
	SET V_CID = (SELECT COUNT(CID) FROM COURSES);
	IF V_CID <= 0 THEN SET V_CID = 1;
	ELSE SELECT MAX(CID) + 1 INTO V_CID FROM COURSES;
    END IF;
    
	SELECT V_CID INTO A_CID;
END $$

DROP PROCEDURE IF EXISTS `PQ_MAKE_COURSE`$$
CREATE PROCEDURE `PQ_MAKE_COURSE` (
	A_TID			INT,
	A_COLLEGEID		INT,
	A_CLASSNAME		VARCHAR(30),
	A_TEXTBOOK		VARCHAR(30),
	A_MAXSIZE		INT,
	A_ROOMNO		INT,
	A_CATEGORY		VARCHAR(20),
    A_TIME			VARCHAR(20))
BEGIN
    CALL PQ_NEW_CID(@A_CID);
    
	INSERT INTO COURSES VALUES(@A_CID, A_COLLEGEID, A_CLASSNAME, A_TEXTBOOK, A_MAXSIZE, 0, A_ROOMNO, A_CATEGORY, A_TIME);
	INSERT INTO LECTURES VALUES(@A_CID, A_TID);
END $$

DROP PROCEDURE IF EXISTS `PQ_GET_COLLEGENAME_WITH_ID`$$
CREATE PROCEDURE `PQ_GET_COLLEGENAME_WITH_ID` (
	A_COLLEGEID		INT)
BEGIN
	SELECT NAME FROM COLLEGES WHERE COLLEGEID = A_COLLEGEID;
END $$

DROP PROCEDURE IF EXISTS `PQ_TEACHER_COURSES`$$
CREATE PROCEDURE `PQ_TEACHER_COURSES` (
    A_TID		INT)
BEGIN
	SELECT * FROM COURSES LEFT JOIN LECTURES ON COURSES.CID = LECTURES.CID WHERE LECTURES.TID = A_TID;
END $$

DROP PROCEDURE IF EXISTS `PQ_DROP_COURSE`$$
CREATE PROCEDURE `PQ_DROP_COURSE` (
    A_CID		INT)
BEGIN
	DELETE FROM COURSES WHERE CID = A_CID;
END $$

DROP PROCEDURE IF EXISTS `PQ_EXPAND_COURSE`$$
CREATE PROCEDURE `PQ_EXPAND_COURSE` (
    A_CID		INT)
BEGIN
	SELECT STUDENTS.FIRSTNAME, STUDENTS.LASTNAME, COURSEHIST.POINTS FROM STUDENTS INNER JOIN COURSEHIST ON STUDENTS.SID = COURSEHIST.SID WHERE COURSEHIST.CID = A_CID;
END $$

DROP PROCEDURE IF EXISTS `PQ_SID_LIST_IN_CID`$$
CREATE PROCEDURE `PQ_SID_LIST_IN_CID` (
	A_CID		INT)
BEGIN
	SELECT STUDENTS.SID, STUDENTS.FIRSTNAME, STUDENTS.LASTNAME FROM COURSEHIST INNER JOIN STUDENTS ON STUDENTS.SID = COURSEHIST.SID WHERE COURSEHIST.CID = A_CID;
END $$

DROP PROCEDURE IF EXISTS `PQ_MAKE_REPORT`$$
CREATE PROCEDURE `PQ_MAKE_REPORT` (
	A_SID		INT,
	A_TID		INT,
	A_CID		INT,
	A_TITLE		VARCHAR(30),
	A_TASK		VARCHAR(200),
	A_DUEDATE	VARCHAR(10),
	A_YEAR		INT)
BEGIN
	DECLARE V_RID INT DEFAULT 0;
	SET V_RID = (SELECT COUNT(REPORTID) FROM REPORTS);
	IF V_RID <= 0 THEN SET V_RID = 1;
	ELSE SELECT MAX(REPORTID) + 1 INTO V_RID FROM REPORTS;
    END IF;
    
	INSERT INTO REPORTS VALUES(V_RID, A_SID, A_TID, A_CID, A_TITLE, A_TASK, '', A_DUEDATE, 0, A_YEAR, 0, 0);
END $$

DROP PROCEDURE IF EXISTS `PQ_MAKE_TEST`$$
CREATE PROCEDURE `PQ_MAKE_TEST` (
	A_SID		INT,
	A_TID		INT,
	A_CID		INT,
	A_SUBJECT	VARCHAR(30),
	A_TASK		VARCHAR(200),
	A_TAKEDATE	VARCHAR(10),
	A_YEAR		INT)
BEGIN
	DECLARE V_TTID INT DEFAULT 0;
	SET V_TTID = (SELECT COUNT(TESTID) FROM TESTS);
	IF V_TTID <= 0 THEN SET V_TTID = 1;
	ELSE SELECT MAX(TESTID) + 1 INTO V_TTID FROM TESTS;
    END IF;
    
	INSERT INTO TESTS VALUES(V_TTID, A_SID, A_TID, A_CID, A_SUBJECT, A_TASK, '', A_TAKEDATE, 0, A_YEAR, 0, 0);
END $$

DROP PROCEDURE IF EXISTS `PQ_SELECT_COURSES_BY_TID`$$
CREATE PROCEDURE `PQ_SELECT_COURSES_BY_TID` (
	A_TID		INT)
BEGIN
	SELECT * FROM COURSES INNER JOIN LECTURES ON LECTURES.CID = COURSES.CID WHERE LECTURES.TID = A_TID;
END $$

DROP PROCEDURE IF EXISTS `PQ_REPORT_LIST_WITH_CID`$$
CREATE PROCEDURE `PQ_REPORT_LIST_WITH_CID` (
	A_CID		INT)
BEGIN
	SELECT DISTINCT REPORTS.TITLE FROM REPORTS WHERE CID = A_CID;
END $$

DROP PROCEDURE IF EXISTS `PQ_FIND_REPORTS_WITH_TITLE`$$
CREATE PROCEDURE `PQ_FIND_REPORTS_WITH_TITLE` (
    A_TITLE		VARCHAR(20))
BEGIN
	SELECT REPORTS.REPORTID, REPORTS.TASK, REPORTS.ANSWERS, REPORTS.GRADE, STUDENTS.FIRSTNAME, STUDENTS.LASTNAME, STUDENTS.SID FROM REPORTS INNER JOIN STUDENTS ON REPORTS.SID = STUDENTS.SID WHERE REPORTS.TITLE = A_TITLE;
END $$

DROP PROCEDURE IF EXISTS `PQ_JUDGE_REPORT`$$
CREATE PROCEDURE `PQ_JUDGE_REPORT` (
	A_RID		INT,
    A_GRADE		DECIMAL)
BEGIN
	UPDATE REPORTS SET GRADE = A_GRADE WHERE REPORTID = A_RID;
END $$

DROP PROCEDURE IF EXISTS `PQ_TEST_LIST_WITH_CID`$$
CREATE PROCEDURE `PQ_TEST_LIST_WITH_CID` (
	A_CID		INT)
BEGIN
	SELECT DISTINCT TESTS.SUBJECT FROM TESTS WHERE CID = A_CID;
END $$

DROP PROCEDURE IF EXISTS `PQ_FIND_TEST_WITH_TITLE`$$
CREATE PROCEDURE `PQ_FIND_TEST_WITH_TITLE` (
    A_TITLE		VARCHAR(20))
BEGIN
	SELECT TESTS.TESTID, TESTS.TASK, TESTS.ANSWERS, TESTS.GRADE, STUDENTS.FIRSTNAME, STUDENTS.LASTNAME, STUDENTS.SID FROM TESTS INNER JOIN STUDENTS ON TESTS.SID = STUDENTS.SID WHERE TESTS.SUBJECT = A_TITLE;
END $$

DROP PROCEDURE IF EXISTS `PQ_JUDGE_TEST`$$
CREATE PROCEDURE `PQ_JUDGE_TEST` (
	A_TTID		INT,
    A_GRADE		DECIMAL)
BEGIN
	UPDATE TESTS SET GRADE = A_GRADE WHERE TESTID = A_TTID;
END $$

DROP PROCEDURE IF EXISTS `PQ_UPDATE_STUDENT_GRADE`$$
CREATE PROCEDURE `PQ_UPDATE_STUDENT_GRADE` (
	A_SID		INT,
	A_CID		INT,
	A_GRADE		DECIMAL,
    A_PRVGRADE	DECIMAL)
BEGIN
	DECLARE A_NEWGRADE DECIMAL DEFAULT 0;
	SET A_NEWGRADE = (SELECT POINTS * WORKDONE + A_GRADE - A_PRVGRADE FROM COURSEHIST WHERE SID = A_SID AND CID = A_CID);
	
	IF A_PRVGRADE = 0 THEN UPDATE COURSEHIST SET POINTS = (A_NEWGRADE)/(WORKDONE+1), WORKDONE = WORKDONE + 1 WHERE SID = A_SID AND CID = A_CID;
	ELSE UPDATE COURSEHIST SET POINTS = (A_NEWGRADE)/(WORKDONE), WORKDONE = WORKDONE WHERE SID = A_SID AND CID = A_CID;
    END IF;
END$$
DELIMITER ;
